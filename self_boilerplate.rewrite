% rewrite self_boilerplate {
  main [front cut_mark back] = ‛«front»

function transpile_t2t (grammar_spec, rewrite_spec) {
    let parser = ohm.grammar (grammar_spec);
    let cst = parser.match (rewrite_spec);
    if (cst.succeeded ()) {
        let cstSemantics = parser.createSemantics ();
        cstSemantics.addOperation ('rwr', rewrite_js);
        var generated_code = cstSemantics (cst).rwr ();
        return generated_code;
    } else {
        return cst.message;     
    }
}


import * as fs from 'fs';
const argv = process.argv.slice(2);
let dslGrammarFilename = argv[0];
let dslRewriteFilename = argv[1];
let srcFilename = argv[2];
let dslGrammar = fs.readFileSync(dslGrammarFilename, 'utf-8');
let dslRewrite = fs.readFileSync(dslRewriteFilename, 'utf-8');
var generated = transpile_t2t (grammar, dslRewrite);
if (srcFilename) {
    var boilerplate = ${"`"}

    function t2t_phase2 (grammr, sem, scn) {
        let parser = ohm.grammar (grammr);
        let cst = parser.match (src);
        if (cst.succeeded ()) {
            let cstSemantics = parser.createSemantics ();
            cstSemantics.addOperation ('rwr', sem);
            var generated_code = cstSemantics (cst).rwr ();
            return generated_code;
        } else {
            return cst.message; 
        }
    }

    t2t_phase2 (dslGrammar, rewrite_js, src);
    ${"`"};
    var phase2 = generated + boilerplate;
    if ('-' == srcFilename) { srcFilename = 0 }
    let src = fs.readFileSync(srcFilename, 'utf-8');
    try {
	var result = eval (phase2);
	console.log (result);
    }
    catch (e) {
	console.log (phase2);
	console.log (e);
    }
} else {
    var pre_boilerplate = ${"`"}
        'use strict'

        import {_} from './support.mjs';
        import * as ohm from 'ohm-js';

        let return_value_stack = [];
        let rule_name_stack = [];

        const grammar = String.raw${'${"`"}'}
    ${"`"};
    var mid_boilerplate = "${"`"};";
    var post_boilerplate = ${"`"}
// ~~~~~~ stock main ~~~~~~
        function main (src) {
            let parser = ohm.grammar (grammar);
            let cst = parser.match (src);
            if (cst.succeeded ()) {
                let cstSemantics = parser.createSemantics ();
                cstSemantics.addOperation ('rwr', rewrite_js);
                var generated_code = cstSemantics (cst).rwr ();
                return generated_code;
            } else {
                return cst.message;     
            }
        }

        import * as fs from 'fs';
        let src = fs.readFileSync(0, 'utf-8');
        var result = main (src);
        console.log (result);
    ${"`"};
    let program = pre_boilerplate + dslGrammar + mid_boilerplate + generated + post_boilerplate;
    console.log (program);
}’
  front [front_char+] = ‛«front_char»’
  front_char [c] = ‛«c»’
  back [any+] = ‛’
  cut_mark [m1 cs* m2 nl] = ‛’
}
