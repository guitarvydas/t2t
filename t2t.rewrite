% rewrite t2t {
  main [ParameterDefs* rewriteDef] = ‛
${ParameterDefs}
${rewriteDef}

’

  ParameterDef [_p name] = ‛\nlet «name»_stack = [];⎨memo_parameter ‛«name»’⎬’

  rewriteDef [_r ws name ws2 lb ws3 rewriteRules+ ws4 rb ws5] = ‛const rewrite_js = {«rewriteRules»
    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c.rwr ()); }
};


’

  rule_parameter_as_string [lq cs rq] = ‛"% parameter"’
  rule_rewrite_as_string [lq cs rq] = ‛"% rewrite"’
  rule_basic [cs] = ‛«cs»’

  name [nameFirst nameRest*] = ‛«nameFirst»«nameRest»’

  nameFirst [c] = ‛«c»’
  nameRest [c] = ‛«c»’


  rewriteRule_withbefore [rwName ws1 lb ws2 rwParameterDefs+ ws3+ rb ws4 before ws7 _eq ws5 rewriteScope ws6] ⎨reset_stacks ‛’ ⎬ = ‛
«rwName» : function («rwParameterDefs») {
⎨foreach_arg ‛let ☐ = undefined;’⎬
let _pre = «before»;
return_value_stack.push ("");
rule_name_stack.push ("");
_.set_top (rule_name_stack, "«rwName»");
⎨foreach_parameter ‛☐_stack.push (☐_stack [☐_stack.length-1]);’⎬
⎨args_as_string ‛’⎬
«rewriteScope»
⎨foreach_parameter ‛☐_stack.pop ();’⎬
rule_name_stack.pop ();
return return_value_stack.pop ();
},’
  
  rewriteRule_plain_no_scope [rwName ws1 lb ws2 rwParameterDefs+ ws3+ rb ws4 _eq ws5 raw ws6] ⎨reset_stacks ‛’ ⎬ = ‛
«rwName» : function («rwParameterDefs») {
⎨foreach_arg ‛let ☐ = undefined;’⎬
return_value_stack.push ("");
rule_name_stack.push ("");
_.set_top (rule_name_stack, "«rwName»");
⎨args_as_string ‛’⎬
«raw»
rule_name_stack.pop ();
return return_value_stack.pop ();
},’
  
  rewriteRule_plain [rwName ws1 lb ws2 rwParameterDefs+ ws3+ rb ws4 _eq ws5 rewriteScope ws6] ⎨reset_stacks ‛’ ⎬ = ‛
«rwName» : function («rwParameterDefs») {
⎨foreach_arg ‛let ☐ = undefined;’⎬
return_value_stack.push ("");
rule_name_stack.push ("");
_.set_top (rule_name_stack, "«rwName»");
⎨foreach_parameter ‛☐_stack.push (☐_stack [☐_stack.length-1]);’⎬
⎨args_as_string ‛’⎬
«rewriteScope»
⎨foreach_parameter ‛☐_stack.pop ();’⎬
rule_name_stack.pop ();
return return_value_stack.pop ();
},’
  

  rwRuleName [name] =‛«name»’
  rwArgDef [name] =‛_«name», ⎨memo_arg ‛«name»’ ‛☐ = _☐.rwr ()\n’⎬’
  rwIterArgDef [name op] = ‛_«name», ⎨memo_arg ‛«name»’  ‛☐ = _☐.rwr ().join ('')\n’⎬’
  rwParenthesizedIterArgDef [lb defs+ rb op] = ‛«defs»’
  rwParameterDef [def] = ‛«def»’
  rwArgRef [name] =‛«name»’
  rwParenArgDef [name ws] = ‛_«name», ⎨memo_arg ‛«name»’  ‛☐ = _☐.rwr ().join ('')\n’⎬’

  rewriteScope_within_support_wrapper [lb ws1 lb2 ws2 name ws3 s ws4 rb2 ws5 scope ws6 rb ws7] = ‛
_.pre_«name» (\`«s»\`);
«scope»
_.post_«name» (\`«s»\`);’

  rewriteScope_with_parameter [lb ws1 name ws2 _eq ws3 rewriteFormatString ws4 rewriteScope ws5 rb ws6] = ‛_.set_top («name»_stack, \`«rewriteFormatString»\`);\n«rewriteScope»’
  rewriteScope_raw [x] = ‛«x»’
  rewriteScopeRaw [rewriteFormatString] = ‛\n_.set_top (return_value_stack, \`«rewriteFormatString»\`);\n’
  
  rewriteFormatString [lq formatChars* rq] = ‛«formatChars»’
  formatChar_support_interpolation [lb ws1 name ws2 interpolation_args ws3 rb] = ‛\$\{_.«name» («interpolation_args»)\}’
  formatChar_arg_interpolation [lb rwRef rb] = ‛\$\{«rwRef»\}’
  formatChar_parameter_interpolation [lb rwRef rb] = ‛\$\{_.top («rwRef»_stack)\}’
  formatChar_escaped [_bslash c] = ‛«_bslash»«c»’
  formatChar_raw_character [c] = ‛«c»’

  before [lb ws1 name ws2 before_args ws3 rb] = ‛_.«name» («before_args»)’
  supportArgsForInterpolation [s more*] = ‛\`«s»\`«more»’
  wsRewriteFormatString_for_interpolation [ws s] = ‛, \`«s»\`’
  supportArgsForBefore [s more*] = ‛\`«s»\`«more»’
  wsRewriteFormatString_for_before [ws s] = ‛, \`«s»\`’
}
