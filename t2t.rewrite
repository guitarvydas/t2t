% rewrite t2t {
  main [parameterDefs* rewriteDef] = ‛let _rewrite = {«parameterDefs»«rewriteDef»
_terminal: function () { return this.sourceString; },
_iter: function (...children) { return children.map(c => c.rwr ()); }
};
’

  parameterDef [_pct _1 _parameter _2 name _3] = ‛’
  rewriteDef [ _pct _1 _rewrite _2 name _3 _lb _4 rewriteRules+ _5 rb _6] = ‛«rewriteRules»’

  rewriteRule [ruleName _1 lb _2 argDefs* _3s* rb _4 _eq _5 rewriteScope _6] = ‛\n«ruleName» : function («argDefs») {
_rewrite_support.enter_rule ("«ruleName»");«rewriteScope»
return _rewrite_support.exit_rule ("«ruleName»");
},’

  argDef_parenthesized [lp names+ rp op] = ‛«names»’
  argDef_iter [name op] = ‛«name»,’
  argDef_plain [name] = ‛«name»,’

  rewriteScope_call [lb _1 lb2 _a fname _b arg+ _c rb2 _2 rewriteScope _3 rb] = ‛\n_.«fname» ("pre", «arg»);\n«rewriteScope»\n_.«fname» ("post", «arg»);’
  rewriteScope_parameterbinding [lb _1 pname _2 _eq _3 s _4 scope _5 rb] = ‛\n_rewrite_support.pushParameter ("«pname»", «s»);«scope»\n_rewrite_support.popParameter ("«pname»");’
  rewriteScope_plain [s] = ‛\n_rewrite_support.set_return («s»);’

  rewriteFormatString [lq formatItems* rq] = ‛\`«formatItems»\`’
  formatItem_supportCall [lb _1 name _2 argStrings+ rb] = ‛\$\{_.«name» ("", «argStrings»)\}’
  formatItem_parameter [lb parameterRef rb] = ‛«parameterRef»’
  formatItem_arg [lb argRef rb] = ‛«argRef»’
  formatItem_escapedCharacter [bslash any] = ‛«bslash»«any»’
  formatItem_rawCharacter [c] = ‛«c»’

  parenarg [name ws] = ‛«name»,’
  argstring [str ws] = ‛«str», ’
  
  argRef [name] = ‛\$\{«name».rwr ()\}’
  parameterRef [name] = ‛\$\{_rewrite_support.getParameter ("«name»")\}’
  
  ruleName [name] = ‛«name»’

  name [nameFirst nameRests*] = ‛«nameFirst»«nameRests»’
  nameFirst [c] = ‛«c»’
  nameRest [c] = ‛«c»’

  s_ [space*] = ‛«space»’
}
