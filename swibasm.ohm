// swib instructions lisp 2 py
swibasm {
  main = script+
  script = "(" spaces "script" space+ name spaces instruction+ ")" spaces
  instruction =
    | "(" kw<"enter"> spaces name spaces ")" spaces -- enter
    | "(" kw<"exit"> spaces name spaces ")" spaces -- exit
    | "(" op0 ")" spaces -- op0
    | "(" opN space+ integer spaces ")" spaces -- opN
    | "(" kw<"send-accumulator"> space+ port spaces ")" spaces -- sendaccumulator
    | "(" kw<"send-string"> space+ string spaces port spaces ")" spaces -- sendstring
    | "(" kw<"call"> spaces name spaces yesno spaces ")" spaces -- call
    | "(" kw<"peek"> spaces string spaces yesno spaces ")" spaces -- peek
    | "(" kw<"peek-end"> spaces yesno spaces ")" spaces -- peekend
    | "(" kw<"cycle"> spaces instruction+ ")" spaces -- cycle

  op0 =
    | kw<"push-fresh-accumulator">
    | kw<"pop-accumulator">
    | kw<"continue">
    | kw<"break">
    | kw<"send-accumulator">
    | kw<"accept-and-append">
  opN =
    | kw<"prefetch">

  yesno = yes no
  yes = "(" kw<"✓"> spaces instruction+ ")" spaces
  no = "(" kw<"✗"> spaces instruction+ ")" spaces

  name = symbol
  port = string
  
  string = dq (~dq any)* dq
  dq = "\""
  symbol = (~space ~"(" ~")" ~string ~integer ~keyword any)+ -- other
  integer = digit+

  keyword =
    | kw<"continue">
    | kw<"break">
    | kw<"enter">
    | kw<"exit">
    | kw<"push-fresh-accumulator">
    | kw<"pop-accumulator">
    | kw<"accept-and-append">
    | kw<"send-accumulator">
    | kw<"send-string">
    | kw<"cycle">
    | kw<"✓">
    | kw<"✗">
  kw<s> = s ~alnum
}
