Ohm {

  main [grammarDef ParameterDefs* rewriteDef] = ‛
'use strict'

import {_} from './support.mjs';
import * as ohm from 'ohm-js';

let return_value_stack = [];
let rule_name_stack = [];
«ParameterDefs»
«grammarDef»
«rewriteDef»

function main (src) {
    let parser = ohm.grammar (grammar);
    let cst = parser.match (src);
    if (cst.succeeded ()) {
	let cstSemantics = parser.createSemantics ();
	cstSemantics.addOperation ('rwr', rewrite_code);
	var generated_code = cstSemantics (cst).rwr ();
	return generated_code;
    } else {
	console.log (parser.trace (src).toString ());
	throw ("grammar error");
    }
}

import * as fs from 'fs';
let src = fs.readFileSync(0, 'utf-8');
var result = main (src);
console.log (result);
’

  ParameterDef [_p name] = ‛\nlet «name»_stack = [];«_.memo_parameter (name)»’

  grammarDef [_g ws name rules+] = ‛
const grammar = String.raw\\\`
«name» {
«rules»
}
\\\`;
’

  rewriteDef [_r ws rewriteRules+] = ‛const rewrite_code = {«rewriteRules»
    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c.rwr ()); }
};
’

  rule_parameter_as_string [lq cs rq] = ‛"% parameter"’
  rule_rewrite_as_string [lq cs rq] = ‛"% rewrite"’
  rule_basic [cs] = ‛«cs»’

  name [nameFirst nameRest*] = ‛«nameFirst»«nameRest»’

  nameFirst [c] = ‛«c»’
  nameRest [c] = ‛«c»’


  rewriteRule_withbefore [rwName ws1 lb ws2 rwParameterDefs+ ws3+ rb ws4 before ws7 _eq ws5 rewriteScope ws6] ‛«_.reset_stacks ()»’ = ‛
«rwName» : function («rwParameterDefs») {
let _pre = «before»;
return_value_stack.push ("");
rule_name_stack.push ("");
_.set_top (rule_name_stack, "«rwName»");
«_.foreach_parameter ("_stack.push ('');")»
«_.predicate_expansions_as_string ()»
«rewriteScope»
«_.foreach_parameter ("_stack.pop ();")»
rule_name_stack.pop ();
return return_value_stack.pop ();
},’
  
  rewriteRule_plain [rwName ws1 lb ws2 rwParameterDefs+ ws3+ rb ws4 _eq ws5 rewriteScope ws6] ‛«_.reset_stacks ()»’ = ‛
«rwName» : function («rwParameterDefs») {
return_value_stack.push ("");
rule_name_stack.push ("");
_.set_top (rule_name_stack, "«rwName»");
«_.foreach_parameter ("_stack.push ('');")»
«_.predicate_expansions_as_string ()»
«rewriteScope»
«_.foreach_parameter ("_stack.pop ();")»
rule_name_stack.pop ();
return return_value_stack.pop ();
},’
  

  rwRuleName [name] =‛«name»’
  rwPredicateDef [name] =‛«name», «_.memo_predicate (name)»’
  rwIterPredicateDef [name op] = ‛«name», «_.memo_iter_predicate (name)»’
  rwParenthesizedIterPredicateDef [lb defs+ rb op] = ‛«defs»’
  rwParameterDef [def] = ‛«def»’
  rwPredicateRef [name] =‛«name»’
  rwParenPredicateDef [name ws] = ‛«name», «_.memo_iter_predicate (name)»’

  rewriteScope_within_support_wrapper [lb ws1 lb2 ws2 name ws3 s ws4 rb2 ws5 scope ws6 rb ws7] = ‛
_.pre_«name» (\\\`«s»\\\`);
«scope»
_.post_«name» (\\\`«s»\\\`);’

  rewriteScope_with_parameter [lb ws1 name ws2 _eq ws3 rewriteFormatString ws4 rewriteScope ws5 rb ws6] = ‛_.set_top («name»_stack, \\\`«rewriteFormatString»\\\`);\n«rewriteScope»’
  rewriteScope_raw [rewriteFormatString] = ‛_.set_top (return_value_stack, \\\`«rewriteFormatString»\\\`);\n’
  
  rewriteFormatString [lq formatChars* rq] = ‛«formatChars»’
  formatChar_support_interpolation [lb ws1 name ws2 s ws3 rb] = ‛\\\$\\\{_.«name» (\\\`«s»\\\`)\\\}’
  formatChar_predicate_interpolation [lb rwRef rb] = ‛\\\$\\\{«rwRef»\\\}’
  formatChar_parameter_interpolation [lb rwRef rb] = ‛\\\$\\\{_.top («rwRef»_stack)\\\}’
  formatChar_raw_character [c] = ‛«c»’

  before [lb ws1 name ws2 s ws3 rb] = ‛_.«name» (\\\`«s»\\\`)’
}