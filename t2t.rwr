Ohm {

  main [GrammarDef ParameterDefs* rewriteDef] ‛«_.initialize_stacks ()»’ = ‛
'use strict'

var ohm = require('ohm-js');


function set_top (stack, val) {
    stack.pop ();
    stack.push (val);
}

function top (stack) {
    let r = stack.pop ();
    stack.push (r);
    return r;
}

let return_value_stack = [];
let rule_name_stack = [];
«ParameterDefs»
«GrammarDef»
«rewriteDef»

function main (src) {
    let parser = ohm.grammar (grammar);
    let cst = parser.match (src);
    if (cst.succeeded ()) {
	let cstSemantics = parser.createSemantics ();
	cstSemantics.addOperation ('rwr', rewrite_code);
	var generated_code = cstSemantics (cst).rwr ();
	return generated_code;
    } else {
	console.log (parser.trace (src).toString ());
	throw ("grammar error");
    }
}

let fs = require('fs');
let src = fs.readFileSync(0, 'utf-8');
var result = main (src);
console.log (result);
’

  ParameterDef [_p name] = ‛\nlet «name»_stack = [];«_.memo_parameter (name)»’

  GrammarDef [_ name Rules+] = ‛
const grammar = String.raw\\\`
«name» {
«Rules»
}
\\\`;
’

  rewriteDef [_ ws rewriteRules+] = ‛const rewrite_code = {«rewriteRules»
    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c.rwr ()); }
};
’

  Rule_define [ident Formals? ruleDescr? _eq RuleBody] ‛«_.setrule (ident.rwr (), Formals.rwr (), ruleDescr.rwr ())»’ = ‛«RuleBody»’
  Rule_override [ident Formals? _ceq RuleBody]  ‛«_.setrule (ident.rwr (), Formals.rwr (), "")»’ = ‛«RuleBody»’
  Rule_extend [ident Formals? _peq RuleBody]  ‛«_.setrule (ident.rwr (), Formals.rwr (), "")»’ = ‛«RuleBody»’

  RuleBody_toplevelcasebranch [_bar? TopLevelTerm_list] = ‛\n«_bar»«TopLevelTerm_list»’
  RuleBody_seq [_bar? TopLevelTerm_list] = ‛«_bar»«TopLevelTerm_list»’

  TopLevelTermWithCaseName [Seq caseName] = ‛\n«_.getrulename () + "_" + «caseName»» «_.getformals ()»«_.getruleDescr ()» =«Seq»’
  TopLevelTermWithoutCaseName [Seq] =  ‛\n«_.getrulename ()»«_.getformals ()»«_.getruleDescr ()» =«Seq»’

  OverrideRuleBody [_bar? OverrideTopLevelTerm_list] = ‛«_bar»«OverrideTopLevelTerm_list»’

  OverrideTopLevelTerm_superSplice [_ddd] = ‛«_ddd»’
  OverrideTopLevelTerm [tlt] = ‛«tlt»’

  Formals [lb ident_list rb] = ‛«lb»«ident_list»«rb»’

  Params [lb Seq_list rb] = ‛«lb»«Seq_list»«rb»’

  Seq [Iter*] = ‛«Iter»’

  Iter_star [Pred _suffix] = ‛«Pred»«_suffix»’
  Iter_plus [Pred _suffix] = ‛«Pred»«_suffix»’
  Iter_opt [Pred _suffix] = ‛«Pred»«_suffix»’
  Iter [Pred] = ‛«Pred»’

  Pred_not [_prefix Lex] = ‛«_prefix»«Lex»’
  Pred_lookahead [_prefix Lex] = ‛«_prefix»«Lex»’
  Pred [Lex] = ‛«Lex»’

  Lex_lex [_octothorpe Base] = ‛«_octothorpe»«Base»’
  Lex [Base] = ‛«Base»’

  Base_application [ident Params] = ‛ «ident»«Params»’
  Base_simple [ident] = ‛ «ident»’
  Base_range [first _dd second] = ‛ «first»«_dd»«second»’
  Base_terminal [terminal] = ‛ «terminal»’
  Base_parenalt [lb Seq OrSeq+ rb] = ‛ «lb»«Seq»«OrSeq»«rb»’
  Base_parenseq [lb Seq rb] = ‛ «lb»«Seq»«rb»’

  OrSeq [_or Seq] = ‛«_or»«Seq»’

  ruleDescr [lb ruleDescrText rb] = ‛«lb»«ruleDescrText»«rb»’
  ruleDescrText [cs*] = ‛«cs»’

  caseName [_dd ws* name ws2* newlineOrRb] = ‛ «_dd»«ws»«name»«ws2»«newlineOrRb»’

  name [nameFirst nameRest*] = ‛«nameFirst»«nameRest»’

  nameFirst [c] = ‛«c»’
  nameRest [c] = ‛«c»’

  ident [name] = ‛«name»’

  terminal [lq terminalChar* rq] = ‛«lq»«terminalChar»«rq»’

  oneCharTerminal [lq terminalChar rq] = ‛«lq»«terminalChar»«rq»’

  terminalChar [c] = ‛«c»’

  escapeChar_backslash [c] = ‛«c»’
  escapeChar_doubleQuote [c] = ‛«c»’
  escapeChar_singleQuote [c] = ‛«c»’
  escapeChar_backspace [c] = ‛«c»’
  escapeChar_lineFeed [c] = ‛«c»’
  escapeChar_carriageReturn [c] = ‛«c»’
  escapeChar_tab [c] = ‛«c»’
  escapeChar_unicodeCodePoint [lb h1 h2? h3? h4? h5? h6? rb] = ‛«lb»«h1»«h2»«h3»«h4»«h5»«h6»«rb»’
  escapeChar_unicodeEscape [lb h1 h2 h3 h4] = ‛«lb»«h1»«h2»«h3»«h4»’
  escapeChar_hexEscape [lb h1 h2] = ‛«lb»«h1»«h2»’

  comment_singleLine [_ss cs* newlineOrEnd] = ‛«_ss»«cs»’
  comment_multiLine [_slst cs* _stsl] = ‛«_slst»«cs»«_stsl»’

  tokens [token*] = ‛«token»’

  token [tok] = ‛«tok»’
  operator [op] = ‛«op»’
  punctuation [punc] = ‛«punc»’

  NemptyListOf [elem sepelem+] = ‛«elem»«sepelem»’
  NemptyListOf2 [sep elem] = ‛«sep»«elem»’
 
  NonemptyListOf [elem sep+ elem2+] = ‛«elem»«sep»«elem2»’ // needed due to ListOf<...>



  rewriteRule [rwName ws1 lb ws2 rwParameterDefs+ ws3+ rb ws4 _eq ws5 rewriteScope ws6] = ‛
«rwName» : function («rwParameterDefs») {
return_value_stack.push ("");
rule_name_stack.push ("");
set_top (rule_name_stack, "«rwName»");
«_.foreach_parameter ("_stack.push ('');")»
«_.predicate_expansions_as_string ()»
«rewriteScope»
«_.foreach_parameter ("_stack.pop ();")»
rule_name_stack.pop ();
return return_value_stack.pop ();
},’
  
  rwRuleName [name] =‛«name»’
  rwPredicateDef [name] =‛«name», «_.memo_predicate (name)»’
  rwIterPredicateDef [name op] = ‛«name», «_.memo_iter_predicate (name)»’
  rwParenthesizedIterPredicateDef [lb defs+ rb op] = ‛«defs»’
  rwParameterDef [def] = ‛«def»’
  rwPredicateRef [name] =‛«name»’
  rwParenPredicateDef [name ws] = ‛«name», «_.memo_iter_predicate (name)»’

  rewriteScope_with_parameter [lb ws1 name ws2 _eq ws3 rewriteFormatString ws4 rewriteScope ws5 rb ws6] = ‛set_top («name»_stack, \\\`«rewriteFormatString»\\\`);\n«rewriteScope»’
  rewriteScope_raw [rewriteFormatString] = ‛set_top (return_value_stack, \\\`«rewriteFormatString»\\\`);\n’
  
  rewriteFormatString [lq formatChars* rq] = ‛«formatChars»’
  formatChar_predicate_interpolation [lb rwRef rb] = ‛\\\$\\\{«rwRef»\\\}’
  formatChar_parameter_interpolation [lb rwRef rb] = ‛\\\$\\\{top («rwRef»_stack)\\\}’
  formatChar_raw_character [c] = ‛«c»’
  
}