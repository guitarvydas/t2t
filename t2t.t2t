% grammar t2t 
  main = grammarDef applySyntactic<ParameterDef>* rewriteDef

  grammarDef = "% grammar" spaces name rule+
  ParameterDef = "% parameter" name
  rewriteDef = "% rewrite" spaces rewriteRule+


  // just pass the grammar through to OhmJS - it parses and checks the grammar
  rule =
    | "\"" "% parameter" "\"" -- parameter_as_string
    | "\"" "% rewrite" "\"" -- rewrite_as_string
    | ~"% parameter" ~"% rewrite" any -- basic

  name  (a name)
    = nameFirst nameRest*

  nameFirst
    = "_"
    | letter

  nameRest
    = "_"
    | alnum


  // rewrite parsing section
  rewriteRule = 
    | rwRuleName spaces "[" spaces (rwParameterDef spaces)+ "]" spaces before spaces "=" spaces rewriteScope spaces -- withbefore
    | rwRuleName spaces "[" spaces (rwParameterDef spaces)+ "]" spaces "=" spaces rewriteScope spaces -- plain

  rwRuleName = name
  rwArgDef = name
  rwIterArgDef = name ("+" | "*" | "?")
  rwParenthesizedIterArgDef = "(" rwParenArgDef+ ")" ("+" | "*" | "?")
  rwParameterDef = (rwParenthesizedIterArgDef | rwIterArgDef | rwArgDef)
  rwParenArgDef = name spaces

  rwArgRef = name

  rewriteScope =
    | "⎡" spaces "⎨" spaces name spaces rewriteFormatString spaces "⎬" spaces rewriteScope spaces "⎦" spaces -- within_support_wrapper
    | "⎡" spaces name spaces "=" spaces rewriteFormatString spaces rewriteScope spaces "⎦" spaces -- with_parameter
    | #rewriteFormatString -- raw
  rewriteFormatString = "‛" formatChar* "’"
  formatChar =
    | "⎨" spaces name spaces supportArgsForInterpolation spaces "⎬" -- support_interpolation
    | "⟪" rwArgRef "⟫" -- parameter_interpolation
    | "«" rwArgRef "»" -- arg_interpolation
    | ~"‛" ~"’" ~"⎡" ~"⎦" ~"⟪" ~"⟫" ~"«" ~"»" any -- raw_character

  before = "⎨" spaces name spaces supportArgsForBefore spaces "⎬"

  supportArgsForInterpolation = rewriteFormatString wsRewriteFormatString_for_interpolation*
  wsRewriteFormatString_for_interpolation = spaces rewriteFormatString
  supportArgsForBefore = rewriteFormatString wsRewriteFormatString_for_before*
  wsRewriteFormatString_for_before = spaces rewriteFormatString




% rewrite

  main [grammarDef ParameterDefs* rewriteDef] = ‛
'use strict'

import {_} from './support.mjs';
import * as ohm from 'ohm-js';

let return_value_stack = [];
let rule_name_stack = [];
«ParameterDefs»
«grammarDef»
«rewriteDef»

function main (src) {
    let parser = ohm.grammar (grammar);
    let cst = parser.match (src);
    if (cst.succeeded ()) {
	let cstSemantics = parser.createSemantics ();
	cstSemantics.addOperation ('rwr', rewrite_code);
	var generated_code = cstSemantics (cst).rwr ();
	return generated_code;
    } else {
	return parser.trace (src).toString ();
    }
}

import * as fs from 'fs';
let src = fs.readFileSync(0, 'utf-8');
var result = main (src);
console.log (result);
’

  ParameterDef [_p name] = ‛\nlet «name»_stack = [];⎨memo_parameter ‛«name»’⎬’

  grammarDef [_g ws name rules+] = ‛
const grammar = String.raw\`
«name» {
«rules»
}
\`;
’

  rewriteDef [_r ws rewriteRules+] = ‛const rewrite_code = {«rewriteRules»
    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c.rwr ()); }
};
’

  rule_parameter_as_string [lq cs rq] = ‛"% parameter"’
  rule_rewrite_as_string [lq cs rq] = ‛"% rewrite"’
  rule_basic [cs] = ‛«cs»’

  name [nameFirst nameRest*] = ‛«nameFirst»«nameRest»’

  nameFirst [c] = ‛«c»’
  nameRest [c] = ‛«c»’


  rewriteRule_withbefore [rwName ws1 lb ws2 rwParameterDefs+ ws3+ rb ws4 before ws7 _eq ws5 rewriteScope ws6] ⎨reset_stacks ‛’ ⎬ = ‛
«rwName» : function («rwParameterDefs») {
let _pre = «before»;
return_value_stack.push ("");
rule_name_stack.push ("");
_.set_top (rule_name_stack, "«rwName»");
⎨foreach_parameter ‛☐_stack.push ('');’⎬
⎨args_as_string ‛’⎬
«rewriteScope»
⎨foreach_parameter ‛☐_stack.pop ('');’⎬
rule_name_stack.pop ();
return return_value_stack.pop ();
},’
  
  rewriteRule_plain [rwName ws1 lb ws2 rwParameterDefs+ ws3+ rb ws4 _eq ws5 rewriteScope ws6] ⎨reset_stacks ‛’ ⎬ = ‛
«rwName» : function («rwParameterDefs») {
return_value_stack.push ("");
rule_name_stack.push ("");
_.set_top (rule_name_stack, "«rwName»");
⎨foreach_parameter ‛☐_stack.push ('');’⎬
⎨args_as_string ‛’⎬
«rewriteScope»
⎨foreach_parameter ‛☐_stack.pop ('');’⎬
rule_name_stack.pop ();
return return_value_stack.pop ();
},’
  

  rwRuleName [name] =‛«name»’
  rwArgDef [name] =‛«name», ⎨memo_arg ‛«name»’ ‛☐ = ☐.rwr ()\n’⎬’
  rwIterArgDef [name op] = ‛«name», ⎨memo_arg ‛«name»’  ‛☐ = ☐.rwr ().join ('')\n’⎬’
  rwParenthesizedIterArgDef [lb defs+ rb op] = ‛«defs»’
  rwParameterDef [def] = ‛«def»’
  rwArgRef [name] =‛«name»’
  rwParenArgDef [name ws] = ‛«name», ⎨memo_arg ‛«name»’  ‛☐ = ☐.rwr ().join ('')\n’⎬’

  rewriteScope_within_support_wrapper [lb ws1 lb2 ws2 name ws3 s ws4 rb2 ws5 scope ws6 rb ws7] = ‛
_.pre_«name» (\`«s»\`);
«scope»
_.post_«name» (\`«s»\`);’

  rewriteScope_with_parameter [lb ws1 name ws2 _eq ws3 rewriteFormatString ws4 rewriteScope ws5 rb ws6] = ‛_.set_top («name»_stack, \`«rewriteFormatString»\`);\n«rewriteScope»’
  rewriteScope_raw [rewriteFormatString] = ‛_.set_top (return_value_stack, \`«rewriteFormatString»\`);\n’
  
  rewriteFormatString [lq formatChars* rq] = ‛«formatChars»’
  formatChar_support_interpolation [lb ws1 name ws2 interpolation_args ws3 rb] = ‛\$\{_.«name» («interpolation_args»)\}’
  formatChar_arg_interpolation [lb rwRef rb] = ‛\$\{«rwRef»\}’
  formatChar_parameter_interpolation [lb rwRef rb] = ‛\$\{_.top («rwRef»_stack)\}’
  formatChar_raw_character [c] = ‛«c»’

  before [lb ws1 name ws2 before_args ws3 rb] = ‛_.«name» («before_args»)’
  supportArgsForInterpolation [s more*] = ‛\`«s»\`«more»’
  wsRewriteFormatString_for_interpolation [ws s] = ‛, \`«s»\`’
  supportArgsForBefore [s more*] = ‛\`«s»\`«more»’
  wsRewriteFormatString_for_before [ws s] = ‛, \`«s»\`’
